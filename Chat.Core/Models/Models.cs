// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Models.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Chat.Core.Models {

  /// <summary>Holder for reflection information generated from Models.proto</summary>
  public static partial class ModelsReflection {

    #region Descriptor
    /// <summary>File descriptor for Models.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ModelsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxNb2RlbHMucHJvdG8SBGNoYXQiNgoEVXNlchIKCgJpZBgBIAEoAxIQCgh1",
            "c2VybmFtZRgCIAEoCRIQCghwYXNzd29yZBgDIAEoCSIrCghSZXNwb25zZRIP",
            "CgdzdWNjZXNzGAEgASgIEg4KBmRldGFpbBgCIAEoCSIXCgdDb250ZW50EgwK",
            "BHRleHQYASABKAkiYQoLQ2hhdE1lc3NhZ2USEAoIc2VuZGVySWQYASABKAMS",
            "DAoEdGltZRgCIAEoCRIeCgdjb250ZW50GAMgASgLMg0uY2hhdC5Db250ZW50",
            "EhIKCmNoYXRyb29tSWQYBCABKAMiOAoSU2VuZE1lc3NhZ2VSZXF1ZXN0EiIK",
            "B21lc3NhZ2UYASABKAsyES5jaGF0LkNoYXRNZXNzYWdlInoKE1NlbmRNZXNz",
            "YWdlUmVzcG9uc2USMAoGc3RhdHVzGAEgASgOMiAuY2hhdC5TZW5kTWVzc2Fn",
            "ZVJlc3BvbnNlLlN0YXR1cxIOCgZkZXRhaWwYAiABKAkiIQoGU3RhdHVzEgsK",
            "B1N1Y2Nlc3MQABIKCgZGYWlsZWQQASLGAQoGUGVvcGxlEgoKAmlkGAEgASgF",
            "EgwKBG5hbWUYAiABKAkSCgoCaXAYZSABKAkSDAoEcG9ydBhmIAEoBRIxCgpm",
            "cmllbmRCeUlkGMkBIAMoCzIcLmNoYXQuUGVvcGxlLkZyaWVuZEJ5SWRFbnRy",
            "eRIUCgtjaGF0cm9vbUlkcxjKASADKAMaPwoPRnJpZW5kQnlJZEVudHJ5EgsK",
            "A2tleRgBIAEoBRIbCgV2YWx1ZRgCIAEoCzIMLmNoYXQuRnJpZW5kOgI4ASJp",
            "CgZGcmllbmQSDAoEbXlJZBgBIAEoBRIQCghmcmllbmRJZBgCIAEoBRIMCgR0",
            "YWdzGAogAygJEgwKBG5vdGUYCyABKAkSDwoHYmxvY2tlZBgUIAEoCBISCgpj",
            "aGF0cm9vbUlkGBUgASgDImwKCENoYXRyb29tEgoKAmlkGAEgASgDEhEKCXBl",
            "b3BsZUlkcxgCIAMoBRIOCgZob3N0SWQYAyABKAUSDAoEbmFtZRgEIAEoCRIj",
            "CghtZXNzYWdlcxgKIAMoCzIRLmNoYXQuQ2hhdE1lc3NhZ2UiOQoSTmV3Q2hh",
            "dHJvb21SZXF1ZXN0EhAKCHNlbmRlcklkGAEgASgDEhEKCXBlb3BsZUlkcxgC",
            "IAMoBSI6ChJHZXRDaGF0cm9vbVJlcXVlc3QSEAoIc2VuZGVySWQYASABKAMS",
            "EgoKY2hhdHJvb21JZBgCIAEoAyJVChBDaGF0cm9vbVJlc3BvbnNlEg8KB3N1",
            "Y2Nlc3MYASABKAgSIAoIY2hhdHJvb20YAiABKAsyDi5jaGF0LkNoYXRyb29t",
            "Eg4KBmRldGFpbBgDIAEoCSIzCg1TaWdudXBSZXF1ZXN0EhAKCHVzZXJuYW1l",
            "GAEgASgJEhAKCHBhc3N3b3JkGAIgASgJIrkBCg5TaWdudXBSZXNwb25zZRIr",
            "CgZzdGF0dXMYASABKA4yGy5jaGF0LlNpZ251cFJlc3BvbnNlLlN0YXR1cxIO",
            "CgZkZXRhaWwYAiABKAkSDgoGdXNlcklkGAMgASgDIloKBlN0YXR1cxILCgdT",
            "dWNjZXNzEAASEQoNVXNlcm5hbWVFeGlzdBBlEhcKE1VzZXJuYW1lRm9ybWF0",
            "V3JvbmcQZhIXChNQYXNzd29yZEZvcm1hdFdyb25nEGciQgoMTG9naW5SZXF1",
            "ZXN0EhAKCHVzZXJuYW1lGAEgASgJEhAKCHBhc3N3b3JkGAIgASgJEg4KBnVz",
            "ZXJJZBgDIAEoAyKFAQoNTG9naW5SZXNwb25zZRIqCgZzdGF0dXMYASABKA4y",
            "Gi5jaGF0LkxvZ2luUmVzcG9uc2UuU3RhdHVzEg4KBmRldGFpbBgCIAEoCSI4",
            "CgZTdGF0dXMSCwoHU3VjY2VzcxAAEg4KCk5vU3VjaFVzZXIQZRIRCg1Xcm9u",
            "Z1Bhc3N3b3JkEGYiSQoRTWFrZUZyaWVuZFJlcXVlc3QSEAoIc2VuZGVySWQY",
            "ASABKAMSEAoIdGFyZ2V0SWQYAiABKAMSEAoIZ3JlZXRpbmcYAyABKAkinAEK",
            "Ek1ha2VGcmllbmRSZXNwb25zZRIvCgZzdGF0dXMYASABKA4yHy5jaGF0Lk1h",
            "a2VGcmllbmRSZXNwb25zZS5TdGF0dXMSDgoGZGV0YWlsGAIgASgJIkUKBlN0",
            "YXR1cxIKCgZBY2NlcHQQABIKCgZSZWZ1c2UQARIRCg1BbHJlYWR5RnJpZW5k",
            "EAISEAoMVXNlck5vdEV4aXN0EAMiJAoVR2V0UGVvcGxlc0luZm9SZXF1ZXN0",
            "EgsKA2lkcxgBIAMoBSI3ChZHZXRQZW9wbGVzSW5mb1Jlc3BvbnNlEh0KB3Bl",
            "b3BsZXMYASADKAsyDC5jaGF0LlBlb3BsZSJsChJGcmllbmROb3RpZmljYXRp",
            "b24SCgoCaWQYASABKAUSKwoEdHlwZRgCIAEoDjIdLmNoYXQuRnJpZW5kTm90",
            "aWZpY2F0aW9uLlR5cGUiHQoEVHlwZRIJCgVMb2dpbhAAEgoKBkxvZ291dBAB",
            "QhOqAhBDaGF0LkNvcmUuTW9kZWxzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Core.Models.User), global::Chat.Core.Models.User.Parser, new[]{ "Id", "Username", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Core.Models.Response), global::Chat.Core.Models.Response.Parser, new[]{ "Success", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Core.Models.Content), global::Chat.Core.Models.Content.Parser, new[]{ "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Core.Models.ChatMessage), global::Chat.Core.Models.ChatMessage.Parser, new[]{ "SenderId", "Time", "Content", "ChatroomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Core.Models.SendMessageRequest), global::Chat.Core.Models.SendMessageRequest.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Core.Models.SendMessageResponse), global::Chat.Core.Models.SendMessageResponse.Parser, new[]{ "Status", "Detail" }, null, new[]{ typeof(global::Chat.Core.Models.SendMessageResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Core.Models.People), global::Chat.Core.Models.People.Parser, new[]{ "Id", "Name", "Ip", "Port", "FriendById", "ChatroomIds" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Core.Models.Friend), global::Chat.Core.Models.Friend.Parser, new[]{ "MyId", "FriendId", "Tags", "Note", "Blocked", "ChatroomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Core.Models.Chatroom), global::Chat.Core.Models.Chatroom.Parser, new[]{ "Id", "PeopleIds", "HostId", "Name", "Messages" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Core.Models.NewChatroomRequest), global::Chat.Core.Models.NewChatroomRequest.Parser, new[]{ "SenderId", "PeopleIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Core.Models.GetChatroomRequest), global::Chat.Core.Models.GetChatroomRequest.Parser, new[]{ "SenderId", "ChatroomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Core.Models.ChatroomResponse), global::Chat.Core.Models.ChatroomResponse.Parser, new[]{ "Success", "Chatroom", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Core.Models.SignupRequest), global::Chat.Core.Models.SignupRequest.Parser, new[]{ "Username", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Core.Models.SignupResponse), global::Chat.Core.Models.SignupResponse.Parser, new[]{ "Status", "Detail", "UserId" }, null, new[]{ typeof(global::Chat.Core.Models.SignupResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Core.Models.LoginRequest), global::Chat.Core.Models.LoginRequest.Parser, new[]{ "Username", "Password", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Core.Models.LoginResponse), global::Chat.Core.Models.LoginResponse.Parser, new[]{ "Status", "Detail" }, null, new[]{ typeof(global::Chat.Core.Models.LoginResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Core.Models.MakeFriendRequest), global::Chat.Core.Models.MakeFriendRequest.Parser, new[]{ "SenderId", "TargetId", "Greeting" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Core.Models.MakeFriendResponse), global::Chat.Core.Models.MakeFriendResponse.Parser, new[]{ "Status", "Detail" }, null, new[]{ typeof(global::Chat.Core.Models.MakeFriendResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Core.Models.GetPeoplesInfoRequest), global::Chat.Core.Models.GetPeoplesInfoRequest.Parser, new[]{ "Ids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Core.Models.GetPeoplesInfoResponse), global::Chat.Core.Models.GetPeoplesInfoResponse.Parser, new[]{ "Peoples" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.Core.Models.FriendNotification), global::Chat.Core.Models.FriendNotification.Parser, new[]{ "Id", "Type" }, null, new[]{ typeof(global::Chat.Core.Models.FriendNotification.Types.Type) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Core.Models.ModelsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      id_ = other.id_;
      username_ = other.username_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Core.Models.ModelsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      success_ = other.success_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private string detail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Content : pb::IMessage<Content> {
    private static readonly pb::MessageParser<Content> _parser = new pb::MessageParser<Content>(() => new Content());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Content> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Core.Models.ModelsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Content() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Content(Content other) : this() {
      text_ = other.text_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Content Clone() {
      return new Content(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Content);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Content other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Content other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChatMessage : pb::IMessage<ChatMessage> {
    private static readonly pb::MessageParser<ChatMessage> _parser = new pb::MessageParser<ChatMessage>(() => new ChatMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Core.Models.ModelsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage(ChatMessage other) : this() {
      senderId_ = other.senderId_;
      time_ = other.time_;
      Content = other.content_ != null ? other.Content.Clone() : null;
      chatroomId_ = other.chatroomId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage Clone() {
      return new ChatMessage(this);
    }

    /// <summary>Field number for the "senderId" field.</summary>
    public const int SenderIdFieldNumber = 1;
    private long senderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SenderId {
      get { return senderId_; }
      set {
        senderId_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private string time_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private global::Chat.Core.Models.Content content_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chat.Core.Models.Content Content {
      get { return content_; }
      set {
        content_ = value;
      }
    }

    /// <summary>Field number for the "chatroomId" field.</summary>
    public const int ChatroomIdFieldNumber = 4;
    private long chatroomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ChatroomId {
      get { return chatroomId_; }
      set {
        chatroomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SenderId != other.SenderId) return false;
      if (Time != other.Time) return false;
      if (!object.Equals(Content, other.Content)) return false;
      if (ChatroomId != other.ChatroomId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SenderId != 0L) hash ^= SenderId.GetHashCode();
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (content_ != null) hash ^= Content.GetHashCode();
      if (ChatroomId != 0L) hash ^= ChatroomId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SenderId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SenderId);
      }
      if (Time.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Time);
      }
      if (content_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Content);
      }
      if (ChatroomId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ChatroomId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SenderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SenderId);
      }
      if (Time.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (content_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Content);
      }
      if (ChatroomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChatroomId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatMessage other) {
      if (other == null) {
        return;
      }
      if (other.SenderId != 0L) {
        SenderId = other.SenderId;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      if (other.content_ != null) {
        if (content_ == null) {
          content_ = new global::Chat.Core.Models.Content();
        }
        Content.MergeFrom(other.Content);
      }
      if (other.ChatroomId != 0L) {
        ChatroomId = other.ChatroomId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SenderId = input.ReadInt64();
            break;
          }
          case 18: {
            Time = input.ReadString();
            break;
          }
          case 26: {
            if (content_ == null) {
              content_ = new global::Chat.Core.Models.Content();
            }
            input.ReadMessage(content_);
            break;
          }
          case 32: {
            ChatroomId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendMessageRequest : pb::IMessage<SendMessageRequest> {
    private static readonly pb::MessageParser<SendMessageRequest> _parser = new pb::MessageParser<SendMessageRequest>(() => new SendMessageRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendMessageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Core.Models.ModelsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendMessageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendMessageRequest(SendMessageRequest other) : this() {
      Message = other.message_ != null ? other.Message.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendMessageRequest Clone() {
      return new SendMessageRequest(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private global::Chat.Core.Models.ChatMessage message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chat.Core.Models.ChatMessage Message {
      get { return message_; }
      set {
        message_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendMessageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendMessageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Message, other.Message)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (message_ != null) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (message_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (message_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendMessageRequest other) {
      if (other == null) {
        return;
      }
      if (other.message_ != null) {
        if (message_ == null) {
          message_ = new global::Chat.Core.Models.ChatMessage();
        }
        Message.MergeFrom(other.Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (message_ == null) {
              message_ = new global::Chat.Core.Models.ChatMessage();
            }
            input.ReadMessage(message_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendMessageResponse : pb::IMessage<SendMessageResponse> {
    private static readonly pb::MessageParser<SendMessageResponse> _parser = new pb::MessageParser<SendMessageResponse>(() => new SendMessageResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendMessageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Core.Models.ModelsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendMessageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendMessageResponse(SendMessageResponse other) : this() {
      status_ = other.status_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendMessageResponse Clone() {
      return new SendMessageResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Chat.Core.Models.SendMessageResponse.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chat.Core.Models.SendMessageResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private string detail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendMessageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendMessageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendMessageResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Chat.Core.Models.SendMessageResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SendMessageResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("Success")] Success = 0,
        [pbr::OriginalName("Failed")] Failed = 1,
      }

    }
    #endregion

  }

  public sealed partial class People : pb::IMessage<People> {
    private static readonly pb::MessageParser<People> _parser = new pb::MessageParser<People>(() => new People());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<People> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Core.Models.ModelsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public People() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public People(People other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      ip_ = other.ip_;
      port_ = other.port_;
      friendById_ = other.friendById_.Clone();
      chatroomIds_ = other.chatroomIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public People Clone() {
      return new People(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// Public
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 101;
    private string ip_ = "";
    /// <summary>
    /// Server
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 102;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "friendById" field.</summary>
    public const int FriendByIdFieldNumber = 201;
    private static readonly pbc::MapField<int, global::Chat.Core.Models.Friend>.Codec _map_friendById_codec
        = new pbc::MapField<int, global::Chat.Core.Models.Friend>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Chat.Core.Models.Friend.Parser), 1610);
    private readonly pbc::MapField<int, global::Chat.Core.Models.Friend> friendById_ = new pbc::MapField<int, global::Chat.Core.Models.Friend>();
    /// <summary>
    /// Private
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Chat.Core.Models.Friend> FriendById {
      get { return friendById_; }
    }

    /// <summary>Field number for the "chatroomIds" field.</summary>
    public const int ChatroomIdsFieldNumber = 202;
    private static readonly pb::FieldCodec<long> _repeated_chatroomIds_codec
        = pb::FieldCodec.ForInt64(1618);
    private readonly pbc::RepeatedField<long> chatroomIds_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> ChatroomIds {
      get { return chatroomIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as People);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(People other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (!FriendById.Equals(other.FriendById)) return false;
      if(!chatroomIds_.Equals(other.chatroomIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      hash ^= FriendById.GetHashCode();
      hash ^= chatroomIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(176, 6);
        output.WriteInt32(Port);
      }
      friendById_.WriteTo(output, _map_friendById_codec);
      chatroomIds_.WriteTo(output, _repeated_chatroomIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Ip.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      size += friendById_.CalculateSize(_map_friendById_codec);
      size += chatroomIds_.CalculateSize(_repeated_chatroomIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(People other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      friendById_.Add(other.friendById_);
      chatroomIds_.Add(other.chatroomIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 810: {
            Ip = input.ReadString();
            break;
          }
          case 816: {
            Port = input.ReadInt32();
            break;
          }
          case 1610: {
            friendById_.AddEntriesFrom(input, _map_friendById_codec);
            break;
          }
          case 1618:
          case 1616: {
            chatroomIds_.AddEntriesFrom(input, _repeated_chatroomIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Friend : pb::IMessage<Friend> {
    private static readonly pb::MessageParser<Friend> _parser = new pb::MessageParser<Friend>(() => new Friend());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Friend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Core.Models.ModelsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend(Friend other) : this() {
      myId_ = other.myId_;
      friendId_ = other.friendId_;
      tags_ = other.tags_.Clone();
      note_ = other.note_;
      blocked_ = other.blocked_;
      chatroomId_ = other.chatroomId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend Clone() {
      return new Friend(this);
    }

    /// <summary>Field number for the "myId" field.</summary>
    public const int MyIdFieldNumber = 1;
    private int myId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MyId {
      get { return myId_; }
      set {
        myId_ = value;
      }
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 2;
    private int friendId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FriendId {
      get { return friendId_; }
      set {
        friendId_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "note" field.</summary>
    public const int NoteFieldNumber = 11;
    private string note_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Note {
      get { return note_; }
      set {
        note_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "blocked" field.</summary>
    public const int BlockedFieldNumber = 20;
    private bool blocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Blocked {
      get { return blocked_; }
      set {
        blocked_ = value;
      }
    }

    /// <summary>Field number for the "chatroomId" field.</summary>
    public const int ChatroomIdFieldNumber = 21;
    private long chatroomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ChatroomId {
      get { return chatroomId_; }
      set {
        chatroomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Friend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Friend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MyId != other.MyId) return false;
      if (FriendId != other.FriendId) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (Note != other.Note) return false;
      if (Blocked != other.Blocked) return false;
      if (ChatroomId != other.ChatroomId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MyId != 0) hash ^= MyId.GetHashCode();
      if (FriendId != 0) hash ^= FriendId.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (Note.Length != 0) hash ^= Note.GetHashCode();
      if (Blocked != false) hash ^= Blocked.GetHashCode();
      if (ChatroomId != 0L) hash ^= ChatroomId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MyId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MyId);
      }
      if (FriendId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FriendId);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (Note.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Note);
      }
      if (Blocked != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(Blocked);
      }
      if (ChatroomId != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(ChatroomId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MyId);
      }
      if (FriendId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendId);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (Note.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Note);
      }
      if (Blocked != false) {
        size += 2 + 1;
      }
      if (ChatroomId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ChatroomId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Friend other) {
      if (other == null) {
        return;
      }
      if (other.MyId != 0) {
        MyId = other.MyId;
      }
      if (other.FriendId != 0) {
        FriendId = other.FriendId;
      }
      tags_.Add(other.tags_);
      if (other.Note.Length != 0) {
        Note = other.Note;
      }
      if (other.Blocked != false) {
        Blocked = other.Blocked;
      }
      if (other.ChatroomId != 0L) {
        ChatroomId = other.ChatroomId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MyId = input.ReadInt32();
            break;
          }
          case 16: {
            FriendId = input.ReadInt32();
            break;
          }
          case 82: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 90: {
            Note = input.ReadString();
            break;
          }
          case 160: {
            Blocked = input.ReadBool();
            break;
          }
          case 168: {
            ChatroomId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Chatroom : pb::IMessage<Chatroom> {
    private static readonly pb::MessageParser<Chatroom> _parser = new pb::MessageParser<Chatroom>(() => new Chatroom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chatroom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Core.Models.ModelsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chatroom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chatroom(Chatroom other) : this() {
      id_ = other.id_;
      peopleIds_ = other.peopleIds_.Clone();
      hostId_ = other.hostId_;
      name_ = other.name_;
      messages_ = other.messages_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chatroom Clone() {
      return new Chatroom(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "peopleIds" field.</summary>
    public const int PeopleIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_peopleIds_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> peopleIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PeopleIds {
      get { return peopleIds_; }
    }

    /// <summary>Field number for the "hostId" field.</summary>
    public const int HostIdFieldNumber = 3;
    private int hostId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HostId {
      get { return hostId_; }
      set {
        hostId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "messages" field.</summary>
    public const int MessagesFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Chat.Core.Models.ChatMessage> _repeated_messages_codec
        = pb::FieldCodec.ForMessage(82, global::Chat.Core.Models.ChatMessage.Parser);
    private readonly pbc::RepeatedField<global::Chat.Core.Models.ChatMessage> messages_ = new pbc::RepeatedField<global::Chat.Core.Models.ChatMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Chat.Core.Models.ChatMessage> Messages {
      get { return messages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chatroom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chatroom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!peopleIds_.Equals(other.peopleIds_)) return false;
      if (HostId != other.HostId) return false;
      if (Name != other.Name) return false;
      if(!messages_.Equals(other.messages_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      hash ^= peopleIds_.GetHashCode();
      if (HostId != 0) hash ^= HostId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= messages_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      peopleIds_.WriteTo(output, _repeated_peopleIds_codec);
      if (HostId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HostId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      messages_.WriteTo(output, _repeated_messages_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      size += peopleIds_.CalculateSize(_repeated_peopleIds_codec);
      if (HostId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HostId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += messages_.CalculateSize(_repeated_messages_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chatroom other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      peopleIds_.Add(other.peopleIds_);
      if (other.HostId != 0) {
        HostId = other.HostId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      messages_.Add(other.messages_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            peopleIds_.AddEntriesFrom(input, _repeated_peopleIds_codec);
            break;
          }
          case 24: {
            HostId = input.ReadInt32();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 82: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewChatroomRequest : pb::IMessage<NewChatroomRequest> {
    private static readonly pb::MessageParser<NewChatroomRequest> _parser = new pb::MessageParser<NewChatroomRequest>(() => new NewChatroomRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewChatroomRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Core.Models.ModelsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewChatroomRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewChatroomRequest(NewChatroomRequest other) : this() {
      senderId_ = other.senderId_;
      peopleIds_ = other.peopleIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewChatroomRequest Clone() {
      return new NewChatroomRequest(this);
    }

    /// <summary>Field number for the "senderId" field.</summary>
    public const int SenderIdFieldNumber = 1;
    private long senderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SenderId {
      get { return senderId_; }
      set {
        senderId_ = value;
      }
    }

    /// <summary>Field number for the "peopleIds" field.</summary>
    public const int PeopleIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_peopleIds_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> peopleIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PeopleIds {
      get { return peopleIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewChatroomRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewChatroomRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SenderId != other.SenderId) return false;
      if(!peopleIds_.Equals(other.peopleIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SenderId != 0L) hash ^= SenderId.GetHashCode();
      hash ^= peopleIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SenderId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SenderId);
      }
      peopleIds_.WriteTo(output, _repeated_peopleIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SenderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SenderId);
      }
      size += peopleIds_.CalculateSize(_repeated_peopleIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewChatroomRequest other) {
      if (other == null) {
        return;
      }
      if (other.SenderId != 0L) {
        SenderId = other.SenderId;
      }
      peopleIds_.Add(other.peopleIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SenderId = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            peopleIds_.AddEntriesFrom(input, _repeated_peopleIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetChatroomRequest : pb::IMessage<GetChatroomRequest> {
    private static readonly pb::MessageParser<GetChatroomRequest> _parser = new pb::MessageParser<GetChatroomRequest>(() => new GetChatroomRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetChatroomRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Core.Models.ModelsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetChatroomRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetChatroomRequest(GetChatroomRequest other) : this() {
      senderId_ = other.senderId_;
      chatroomId_ = other.chatroomId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetChatroomRequest Clone() {
      return new GetChatroomRequest(this);
    }

    /// <summary>Field number for the "senderId" field.</summary>
    public const int SenderIdFieldNumber = 1;
    private long senderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SenderId {
      get { return senderId_; }
      set {
        senderId_ = value;
      }
    }

    /// <summary>Field number for the "chatroomId" field.</summary>
    public const int ChatroomIdFieldNumber = 2;
    private long chatroomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ChatroomId {
      get { return chatroomId_; }
      set {
        chatroomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetChatroomRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetChatroomRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SenderId != other.SenderId) return false;
      if (ChatroomId != other.ChatroomId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SenderId != 0L) hash ^= SenderId.GetHashCode();
      if (ChatroomId != 0L) hash ^= ChatroomId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SenderId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SenderId);
      }
      if (ChatroomId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ChatroomId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SenderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SenderId);
      }
      if (ChatroomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChatroomId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetChatroomRequest other) {
      if (other == null) {
        return;
      }
      if (other.SenderId != 0L) {
        SenderId = other.SenderId;
      }
      if (other.ChatroomId != 0L) {
        ChatroomId = other.ChatroomId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SenderId = input.ReadInt64();
            break;
          }
          case 16: {
            ChatroomId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChatroomResponse : pb::IMessage<ChatroomResponse> {
    private static readonly pb::MessageParser<ChatroomResponse> _parser = new pb::MessageParser<ChatroomResponse>(() => new ChatroomResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatroomResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Core.Models.ModelsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatroomResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatroomResponse(ChatroomResponse other) : this() {
      success_ = other.success_;
      Chatroom = other.chatroom_ != null ? other.Chatroom.Clone() : null;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatroomResponse Clone() {
      return new ChatroomResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "chatroom" field.</summary>
    public const int ChatroomFieldNumber = 2;
    private global::Chat.Core.Models.Chatroom chatroom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chat.Core.Models.Chatroom Chatroom {
      get { return chatroom_; }
      set {
        chatroom_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 3;
    private string detail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatroomResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatroomResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (!object.Equals(Chatroom, other.Chatroom)) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (chatroom_ != null) hash ^= Chatroom.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (chatroom_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Chatroom);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (chatroom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Chatroom);
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatroomResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.chatroom_ != null) {
        if (chatroom_ == null) {
          chatroom_ = new global::Chat.Core.Models.Chatroom();
        }
        Chatroom.MergeFrom(other.Chatroom);
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            if (chatroom_ == null) {
              chatroom_ = new global::Chat.Core.Models.Chatroom();
            }
            input.ReadMessage(chatroom_);
            break;
          }
          case 26: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SignupRequest : pb::IMessage<SignupRequest> {
    private static readonly pb::MessageParser<SignupRequest> _parser = new pb::MessageParser<SignupRequest>(() => new SignupRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Core.Models.ModelsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignupRequest(SignupRequest other) : this() {
      username_ = other.username_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignupRequest Clone() {
      return new SignupRequest(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignupRequest other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SignupResponse : pb::IMessage<SignupResponse> {
    private static readonly pb::MessageParser<SignupResponse> _parser = new pb::MessageParser<SignupResponse>(() => new SignupResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignupResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Core.Models.ModelsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignupResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignupResponse(SignupResponse other) : this() {
      status_ = other.status_;
      detail_ = other.detail_;
      userId_ = other.userId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignupResponse Clone() {
      return new SignupResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Chat.Core.Models.SignupResponse.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chat.Core.Models.SignupResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private string detail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 3;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignupResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignupResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Detail != other.Detail) return false;
      if (UserId != other.UserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Detail);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignupResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Chat.Core.Models.SignupResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            Detail = input.ReadString();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SignupResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("Success")] Success = 0,
        [pbr::OriginalName("UsernameExist")] UsernameExist = 101,
        [pbr::OriginalName("UsernameFormatWrong")] UsernameFormatWrong = 102,
        [pbr::OriginalName("PasswordFormatWrong")] PasswordFormatWrong = 103,
      }

    }
    #endregion

  }

  public sealed partial class LoginRequest : pb::IMessage<LoginRequest> {
    private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Core.Models.ModelsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest(LoginRequest other) : this() {
      username_ = other.username_;
      password_ = other.password_;
      userId_ = other.userId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest Clone() {
      return new LoginRequest(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 3;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      if (UserId != other.UserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginResponse : pb::IMessage<LoginResponse> {
    private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Core.Models.ModelsReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse(LoginResponse other) : this() {
      status_ = other.status_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse Clone() {
      return new LoginResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Chat.Core.Models.LoginResponse.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chat.Core.Models.LoginResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private string detail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Chat.Core.Models.LoginResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LoginResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("Success")] Success = 0,
        [pbr::OriginalName("NoSuchUser")] NoSuchUser = 101,
        [pbr::OriginalName("WrongPassword")] WrongPassword = 102,
      }

    }
    #endregion

  }

  public sealed partial class MakeFriendRequest : pb::IMessage<MakeFriendRequest> {
    private static readonly pb::MessageParser<MakeFriendRequest> _parser = new pb::MessageParser<MakeFriendRequest>(() => new MakeFriendRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MakeFriendRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Core.Models.ModelsReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeFriendRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeFriendRequest(MakeFriendRequest other) : this() {
      senderId_ = other.senderId_;
      targetId_ = other.targetId_;
      greeting_ = other.greeting_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeFriendRequest Clone() {
      return new MakeFriendRequest(this);
    }

    /// <summary>Field number for the "senderId" field.</summary>
    public const int SenderIdFieldNumber = 1;
    private long senderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SenderId {
      get { return senderId_; }
      set {
        senderId_ = value;
      }
    }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private long targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "greeting" field.</summary>
    public const int GreetingFieldNumber = 3;
    private string greeting_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Greeting {
      get { return greeting_; }
      set {
        greeting_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MakeFriendRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MakeFriendRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SenderId != other.SenderId) return false;
      if (TargetId != other.TargetId) return false;
      if (Greeting != other.Greeting) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SenderId != 0L) hash ^= SenderId.GetHashCode();
      if (TargetId != 0L) hash ^= TargetId.GetHashCode();
      if (Greeting.Length != 0) hash ^= Greeting.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SenderId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SenderId);
      }
      if (TargetId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TargetId);
      }
      if (Greeting.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Greeting);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SenderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SenderId);
      }
      if (TargetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetId);
      }
      if (Greeting.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Greeting);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MakeFriendRequest other) {
      if (other == null) {
        return;
      }
      if (other.SenderId != 0L) {
        SenderId = other.SenderId;
      }
      if (other.TargetId != 0L) {
        TargetId = other.TargetId;
      }
      if (other.Greeting.Length != 0) {
        Greeting = other.Greeting;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SenderId = input.ReadInt64();
            break;
          }
          case 16: {
            TargetId = input.ReadInt64();
            break;
          }
          case 26: {
            Greeting = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MakeFriendResponse : pb::IMessage<MakeFriendResponse> {
    private static readonly pb::MessageParser<MakeFriendResponse> _parser = new pb::MessageParser<MakeFriendResponse>(() => new MakeFriendResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MakeFriendResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Core.Models.ModelsReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeFriendResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeFriendResponse(MakeFriendResponse other) : this() {
      status_ = other.status_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeFriendResponse Clone() {
      return new MakeFriendResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Chat.Core.Models.MakeFriendResponse.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chat.Core.Models.MakeFriendResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private string detail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MakeFriendResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MakeFriendResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MakeFriendResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Chat.Core.Models.MakeFriendResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MakeFriendResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("Accept")] Accept = 0,
        [pbr::OriginalName("Refuse")] Refuse = 1,
        [pbr::OriginalName("AlreadyFriend")] AlreadyFriend = 2,
        [pbr::OriginalName("UserNotExist")] UserNotExist = 3,
      }

    }
    #endregion

  }

  public sealed partial class GetPeoplesInfoRequest : pb::IMessage<GetPeoplesInfoRequest> {
    private static readonly pb::MessageParser<GetPeoplesInfoRequest> _parser = new pb::MessageParser<GetPeoplesInfoRequest>(() => new GetPeoplesInfoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPeoplesInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Core.Models.ModelsReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPeoplesInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPeoplesInfoRequest(GetPeoplesInfoRequest other) : this() {
      ids_ = other.ids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPeoplesInfoRequest Clone() {
      return new GetPeoplesInfoRequest(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_ids_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> ids_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPeoplesInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPeoplesInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPeoplesInfoRequest other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPeoplesInfoResponse : pb::IMessage<GetPeoplesInfoResponse> {
    private static readonly pb::MessageParser<GetPeoplesInfoResponse> _parser = new pb::MessageParser<GetPeoplesInfoResponse>(() => new GetPeoplesInfoResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPeoplesInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Core.Models.ModelsReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPeoplesInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPeoplesInfoResponse(GetPeoplesInfoResponse other) : this() {
      peoples_ = other.peoples_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPeoplesInfoResponse Clone() {
      return new GetPeoplesInfoResponse(this);
    }

    /// <summary>Field number for the "peoples" field.</summary>
    public const int PeoplesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Chat.Core.Models.People> _repeated_peoples_codec
        = pb::FieldCodec.ForMessage(10, global::Chat.Core.Models.People.Parser);
    private readonly pbc::RepeatedField<global::Chat.Core.Models.People> peoples_ = new pbc::RepeatedField<global::Chat.Core.Models.People>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Chat.Core.Models.People> Peoples {
      get { return peoples_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPeoplesInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPeoplesInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!peoples_.Equals(other.peoples_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= peoples_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      peoples_.WriteTo(output, _repeated_peoples_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += peoples_.CalculateSize(_repeated_peoples_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPeoplesInfoResponse other) {
      if (other == null) {
        return;
      }
      peoples_.Add(other.peoples_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            peoples_.AddEntriesFrom(input, _repeated_peoples_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FriendNotification : pb::IMessage<FriendNotification> {
    private static readonly pb::MessageParser<FriendNotification> _parser = new pb::MessageParser<FriendNotification>(() => new FriendNotification());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.Core.Models.ModelsReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendNotification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendNotification(FriendNotification other) : this() {
      id_ = other.id_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendNotification Clone() {
      return new FriendNotification(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Chat.Core.Models.FriendNotification.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chat.Core.Models.FriendNotification.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FriendNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FriendNotification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FriendNotification other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            type_ = (global::Chat.Core.Models.FriendNotification.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FriendNotification message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("Login")] Login = 0,
        [pbr::OriginalName("Logout")] Logout = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
