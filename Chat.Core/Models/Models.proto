syntax = "proto3";
package chat;
option csharp_namespace = "Chat.Core.Models";

// To compile:
// protoc Models.proto --csharp_out=./ --grpc_out=./ --plugin=protoc-gen-grpc=/usr/local/bin/grpc_csharp_plugin

message Response
{
	bool success = 1;
	string detail = 2;
}

message Content
{
    message Image {
		bytes data = 1;
    }
    message File {
        string name = 1;
        string path = 2;
    }
    message Withdraw {
		int64 withdrawId = 1;
    }
    message PeopleEnter {
		int64 peopleId = 1;
    }
    message PeopleLeave {
		int64 peopleId = 1;
		int64 kickOutById = 2;
    }
    message Created {
		int64 creatorId = 1;
    }
    message New {
        repeated int64 peopleIds = 1;
        string name = 2;
    }
    message Dismiss {

    }
    message AddPeople {
        repeated int64 peopleIds = 1;
    }
    message RemovePeople {
        repeated int64 peopleIds = 1;
    }
    message Apply {
        string message = 1;
    }
    message Quit {
        string message = 1;
    }
    message Announce {
        string message = 1;
    }
    message SetProperty {
        string key = 1;
        string value = 2;
    }
    oneof content {
        // Message
		string text = 100;
		Image image = 101;
        File file = 102;

        // Event Only
		PeopleEnter peopleEnter = 103;
		PeopleLeave peopleLeave = 104;
        Created created = 105;

        // Command & Event
        New new = 200;
        Dismiss dismiss = 201;
        AddPeople addPeople = 202;
        RemovePeople removePeople = 203;
        Apply apply = 204;
        Quit quit = 205;
        Announce announce = 206;
        SetProperty setPeoperty = 207;
        Withdraw withdraw = 208;
    }
}

message ChatMessage
{
    int64 id = 1;
	int64 senderId = 2;
    int64 timeUnixMs = 3;
	Content content = 4;
	int64 chatroomId = 5;
}

message ChatroomResponse {
    bool success = 1;
    string detail = 2;
    int64 chatroomId = 3;
}

message SendMessageRequest
{
	ChatMessage message = 1;
}

message SendMessageResponse
{
	bool success = 1;
	string detail = 2;
	int64 chatroomId = 3;
}

message PeopleInfo
{
	// Public Info
	int64 id = 1;
	string username = 2;

	// Relationship Info
	repeated string tags = 10;
	string note = 11;
	bool blocked = 20;
	int64 chatroomId = 21;

	// Role Specific Info
	oneof roleInfo {
		SelfInfo self = 101;
		FriendInfo friend = 102;
		StrangerInfo stranger = 103;
	}

	message SelfInfo {
        UserSettings settings = 1;
        int64 signupTimeUnixMs = 2;
	}
	message FriendInfo {

	}
	message StrangerInfo {

	}
}

message UserSettings {

}

message ChatroomInfo
{
	int64 id = 1;
	repeated int64 peopleIds = 2;
	int64 hostId = 3;
	string name = 4;
	bool isP2P = 5;
}

message NewChatroomRequest
{
	int64 senderId = 1;
	repeated int32 peopleIds = 2;
}

message NewChatroomResponse {
    bool success = 1;
    ChatroomInfo chatroom = 2;
}

message GetChatroomInfoRequest
{
	int64 senderId = 1;
	int64 chatroomId = 2;
}

message GetChatroomInfoResponse
{
	bool success = 1;
	ChatroomInfo chatroom = 2;
	string detail = 3;
}

message SignupRequest
{
	string username = 1;
	string password = 2;
}

message SignupResponse
{
	enum Status
	{
		Success = 0;
		UsernameExist = 101;
		UsernameFormatWrong = 102;
		PasswordFormatWrong = 103;
	}
	Status status = 1;
	string detail = 2;
	int64 userId = 3;
}

message LoginRequest
{
	string username = 1;
	string password = 2;
	int64 userId = 3;
}

message LoginResponse
{
	enum Status
	{
		Success = 0;
		NoSuchUser = 101;
		WrongPassword = 102;
	}
	Status status = 1;
	string detail = 2;
}

message MakeFriendRequest
{
	int64 senderId = 1;
	int64 targetId = 2;
	string greeting = 3;
}

message MakeFriendResponse
{
	enum Status
	{
		Accept = 0;
		Refuse = 1;
		AlreadyFriend = 2;
		UserNotExist = 3;
		UserNotOnline = 4;
		ResponseTimeout = 5;
		WithSelf = 6;
	}
	Status status = 1;
	string detail = 2;
}

message GetPeopleInfoRequest
{
    int64 senderId = 1;
    int64 targetId = 2;
}

message GetPeopleInfoResponse
{
    PeopleInfo peopleInfo = 1;
}

message GetMessagesRequest
{
	int64 senderId = 1;
    int64 afterTimeUnixMs = 2;
	int64 chatroomId = 3;
    int32 count = 4;
}

message GetDataRequest {
    string fileName = 1;
    int32 seed = 10;
    int32 randLength = 11;
}

message GetDataResponse {
    bytes data = 1;
}