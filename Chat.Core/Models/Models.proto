syntax = "proto3";
package chat;
option csharp_namespace = "Chat.Core.Models";

// To compile:
// protoc Models.proto --csharp_out=./ --grpc_out=./ --plugin=protoc-gen-grpc=/usr/local/bin/grpc_csharp_plugin

message Response
{
	bool success = 1;
	string detail = 2;
}

message Content
{
	string text = 1;
}

message ChatMessage
{
    int64 id = 1;
	int64 senderId = 2;
	int64 timeUnix = 3;
	Content content = 4;
	int64 chatroomId = 5;
}

message SendMessageRequest
{
	ChatMessage message = 1;
}

message SendMessageResponse
{
	enum Status
	{
		Success = 0;
		Failed = 1;
	}
	Status status = 1;
	string detail = 2;
}

message PeopleInfo
{
	// Public
	int64 id = 1;
	string username = 2;
}

message Friend
{
	int32 myId = 1;
	int32 friendId = 2;
	repeated string tags = 10;
	string note = 11;
	bool blocked = 20;
	int64 chatroomId = 21;
}

message ChatroomInfo
{
	int64 id = 1;
	repeated int64 peopleIds = 2;
	int64 hostId = 3;
	string name = 4;
}

message NewChatroomRequest
{
	int64 senderId = 1;
	repeated int32 peopleIds = 2;
}

message GetChatroomInfoRequest
{
	int64 senderId = 1;
	int64 chatroomId = 2;
}

message GetChatroomInfoResponse
{
	bool success = 1;
	ChatroomInfo chatroom = 2;
	string detail = 3;
}

message SignupRequest
{
	string username = 1;
	string password = 2;
}

message SignupResponse
{
	enum Status
	{
		Success = 0;
		UsernameExist = 101;
		UsernameFormatWrong = 102;
		PasswordFormatWrong = 103;
	}
	Status status = 1;
	string detail = 2;
	int64 userId = 3;
}

message LoginRequest
{
	string username = 1;
	string password = 2;
	int64 userId = 3;
}

message LoginResponse
{
	enum Status
	{
		Success = 0;
		NoSuchUser = 101;
		WrongPassword = 102;
	}
	Status status = 1;
	string detail = 2;
}

message MakeFriendRequest
{
	int64 senderId = 1;
	int64 targetId = 2;
	string greeting = 3;
}

message MakeFriendResponse
{
	enum Status
	{
		Accept = 0;
		Refuse = 1;
		AlreadyFriend = 2;
		UserNotExist = 3;
	}
	Status status = 1;
	string detail = 2;
}

message GetPeopleInfoRequest
{
    int64 senderId = 1;
    int64 targetId = 2;
}

message GetPeopleInfoResponse
{
    PeopleInfo peopleInfo = 1;
}

message FriendNotification
{
	enum Type
	{
		Login = 0;
		Logout = 1;
	}
	int32 id = 1;
	Type type = 2;
}

message GetMessagesRequest
{
    int64 userId = 1;
    int64 afterTimeUnix = 2;
}
